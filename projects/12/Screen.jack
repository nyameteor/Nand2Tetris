// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int width;
    static int height;
    static int screenBase;
    static int screenTop;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let width = 512;
        let height = 256;
        let screenBase = 16384;
        let screenTop = 24575;      // screenBase + ((width * height) / 16) - 1
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i, end;

        let i = screenBase;
        while (~(i > screenTop)) {
            do Memory.poke(i, ~color);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, i;

        if ((x < 0) | (x > width)) {
            return;
        }
        if ((y < 0) | (y > height)) {
            return;
        }

        let address = screenBase + (width / 16 * y) + (x / 16);
        let value = Memory.peek(address);
        // Set the (x%16)th bit of value to the current color.
        let i = x - (x / 16 * 16);
        let value = Math.setBit(value, i, color);
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        let a = 0;
        let b = 0;
        let diff = 0;
        while (~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
                if (dy > 0) {
                    let diff = diff + dy;
                } else {
                    let diff = diff - dy;
                }
            } else {
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
                if (dx > 0) {
                    let diff = diff - dx;
                } else {
                    let diff = diff + dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy, b;

        let dy = y2 - y1;
        let b = 0;
        while (b < dy) {
            do Screen.drawLine(x1, y1 + b, x2, y1 + b);
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, x1, x2;

        if (r > 181) {
            return;
        }

        let dy = -r;
        while (~(dy > r)) {
            let x1 = x - Math.sqrt((r * r) - (dy * dy));
            let x2 = x + Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x1, y + dy, x2, y + dy);
            let dy = dy + 1;
        }
        return;
    }

    /** This function is NOT a part of the Jack OS API. */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int dx, a;

        let dx = x2 - x1;
        let a = 0;
        while (~(Math.abs(a) > Math.abs(dx))) {
            do Screen.drawPixel(x1 + a, y);
            if (dx > 0) {
                let a = a + 1;
            } else {
                let a = a - 1;
            }
        }
        return;
    }

    /** This function is NOT a part of the Jack OS API. */
    function void drawVerticalLine(int x, int y1, int y2) {
        var int dy, b;

        let dy = y2 - y1;
        let b = 0;
        while (~(Math.abs(b) > Math.abs(dy))) {
            do Screen.drawPixel(x, y1 + b);
            if (dy > 0) {
                let b = b + 1;
            } else {
                let b = b - 1;
            }
        }
        return;
    }
}
